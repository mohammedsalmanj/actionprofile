# GitHub Actions workflow file
name: workflow

# Trigger the workflow on push, pull request, and workflow dispatch events
on:
  # Trigger on push events
  push:
    branches:
      - main

  # Trigger on pull request events
  pull_request:
    branches:
      - main

  # Trigger on workflow dispatch events
  workflow_dispatch:
env:
  ECR_REPOSITORY: 'vprofile-appimage'

# Set permissions for the workflow
permissions:
  contents: read

# Define the jobs for the workflow
jobs:
  Build:
    # Run on an ubuntu-latest environment
    runs-on: ubuntu-latest
    steps:
      # Checkout the code
      - name: Code checkout
        uses: actions/checkout@v5
        with:
          # Fetch the entire repository
          fetch-depth: 0

      # Build the application using Maven
      - name: Maven Build
        run: mvn install

      # Upload the build artifact (WAR) as an artifact
      - name: Upload Build Artifact (WAR)
        uses: actions/upload-artifact@v4
        with:
          # Name of the artifact
          name: vprofile-app
          # Path to the artifact
          path: target/*.war

      # Notify if the build fails
      - name: Notify if Build Fails
        if: failure()
        run: echo " Build job failed! Please check logs."


  Testing:
    # Run on an ubuntu-latest environment
    runs-on: ubuntu-latest
    # Needs the Build job to complete successfully
    needs: Build
    steps:
      # Checkout the code
      - name: Code checkout
        uses: actions/checkout@v4
        with:
          # Fetch the entire repository
          fetch-depth: 0

      # Run tests on the main branch
      - name: Run tests on main branch
        if: github.ref == 'refs/heads/main'
        run: mvn test

      # Run Checkstyle on the main branch
      - name: Checkstyle
        if: github.ref == 'refs/heads/main'
        run: mvn checkstyle:checkstyle

      # Skip unit tests and code analysis on other branches
      - name: Run tests on other branches
        if: github.ref != 'refs/heads/main'
        run: echo "Skipping unit tests and code analysis"


  Security_Scan:
    # Run on an ubuntu-latest environment
    runs-on: ubuntu-latest
    # Needs the Build job to complete successfully
    needs: Build
    steps:
      # Checkout the code
      - name: Code checkout
        uses: actions/checkout@v4
        with:
          # Fetch the entire repository
          fetch-depth: 0

      # Run Trivy filesystem scan
      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@master
        with:
          # Scan type
          scan-type: fs
          # Scan reference
          scan-ref: .
          # Format
          format: json
          # Exit code
          exit-code: 0
          # Vuln type
          vuln-type: os,library
          # Output
          output: trivy-results.json

      # Upload Trivy scan results as artifact
      - name: Upload Trivy scan results as artifact
        uses: actions/upload-artifact@v4
        with:
          # Name of the artifact
          name: trivy-scan-results
          # Path to the artifact
          path: trivy-results.json



  BUILD_AND_PUBLISH:
    name: BUILD_AND_PUBLISH
    runs-on: ubuntu-latest
    environment: production
    needs: [Build, Testing, Security_Scan]
    if: github.ref == 'refs/heads/main'

    steps:
      # 1Ô∏è‚É£ Checkout repository
      - name: Code checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2Ô∏è‚É£ Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      # 3Ô∏è‚É£ Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      # 4Ô∏è‚É£ üê≥ Build, Tag, and Push Docker Image
      - name: Build, tag, and push image to Amazon ECR
        working-directory: ${{ github.workspace }}
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: vprofile-appimage
          IMAGE_TAG: latest
        run: |
          echo "üõ†Ô∏è Building Docker image..."
          docker build -f Dockerfiles/app/multistage/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          
          echo "üè∑Ô∏è Tagging image..."
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          
          echo "üì§ Pushing image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          
          echo "‚úÖ Docker image pushed successfully!"

