name: Vprofile CICD Workflow
on: 
  push:
    branches: 
      - main

  pull_request:
    branches: 
      - mainaca

  workflow_dispatch:

  schedule:
    - cron: "10 14 * * 1-5"   # After noon 2:10 pm, Mondat to Friday

env:
  ECR_REPOSITORY: 'vprofile-appimage'
  
permissions: 
  contents: read

jobs:
  Build:
    runs-on: ubuntu-latest
    steps:
      - name: Code checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Maven Build
        run: mvn install

      - name: Upload Build Artifact (WAR)
        uses: actions/upload-artifact@v4
        with:
          name: vprofile-app
          path: target/*.war

      - name: Notify if Build Fails
        if: failure()
        run: echo "ðŸš¨ Build job failed! Please check logs."


  Testing:
    runs-on: ubuntu-latest
    needs: Build
    steps:
      - name: Code checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run tests on main branch
        if: github.ref == 'refs/heads/main'
        run: mvn test

      - name: Checkstyle
        if: github.ref == 'refs/heads/main'
        run: mvn checkstyle:checkstyle

      - name: Run tests on other branches
        if: github.ref != 'refs/heads/main'
        run: echo "Skipping unit tests and code analysis"

  Security_Scan:
    runs-on: ubuntu-latest
    needs: Build
    steps:
      - name: Code checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: fs
          scan-ref: .
          format: json
          exit-code: 0
          vuln-type: os,library
          output: trivy-results.json

      - name: Upload Trivy scan results as artifact
        uses: actions/upload-artifact@v4
        with:
          name: trivy-scan-results
          path: trivy-results.json

  BUILD_AND_PUBLISH:
    name: BUILD_AND_PUBLISH
    runs-on: ubuntu-latest
    environment: production
    needs: [Build, Testing, Security_Scan]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Code checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr 
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -f Docker-files/app/multistage/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
